there are three appraoches to handle authontication && authorization with routes && controllers:
1. protected routes:
    ## router.use(auth.protect, ...);
2. shared routes (Controller-Level Authorization): protected routes && auhtorized in their controllers;
    ## router.use(auth.protect, ...);
3. admin only routes (Route-Level Authorization): protected && authorized routes;
    ## router.use(auth.protect, auth.assignablTo("admin"), ...);




====================
===== DETAILS: ===== Authorization Pattern Guide
====================
1. Route-Level Authorization (for simple role-based access)
   - Use when: The access is purely based on user role
   - Example: getAllUsers, createJob (admin only)
   - Implementation: usersRouter.get("/", authControllers.assignableTo("admin"))

2. Controller-Level Authorization (for complex access rules)
   - Use when: Access depends on user-resource relationship
   - Example: updateUser (users can update themselves, admin can update anyone)
   - Implementation: Check relationships in controller (req.user._id === resource.userId)

Benefits of this approach:
1. Clear separation of concerns
2. More maintainable code
3. Flexible for complex business rules
4. Reusable controllers for both admin and user access
5. Better testability

Example of Complex Authorization in Controller:
```javascript
// Good: Complex authorization in controller
exports.updateUser = async (req, res) => {
  // Admin can update anyone
  if (req.user.role === "admin") {
    user = await User.findById(req.params.userId);
  } 
  // Users can only update themselves
  else if (req.user._id.toString() === req.params.userId) {
    user = req.user;
  } 
  else {
    return next(new AppError("Not authorized", 403));
  }
  // Continue with update logic...
}